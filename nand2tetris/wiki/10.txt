{{Template:个人学习报告
|天=十
|日期=2019年11月4日
|报告主题=虚拟机及栈的概念的学习以及区块链技术的讨论、对硬件设计的进一步探索
|关键词=虚拟机、栈、Definity、比特币
|摘要=同学作了虚拟机及栈的概念的介绍，并且我们对其进行了讨论和进一步思考；随后我们随老师一起讨论了区块链的技术，包括了DEFINITY和比特币等一些具体的例子。
|课程回顾=
#学习讨论了虚拟机的概念。横向对比了我们课程中使用的语言结构与Clang及Java之间的共同性，并介绍了通用的中间语言的重要性。
#讨论了基于栈的运算模式。栈的运行模式简单，后进先出的概念便于理解也便于编写机械语言，并且减少冗余度。
#介绍了一种可以无限扩容的软件运行模式DEFINITY。简要浏览了几篇来自不同学者的文献，其中包括姚期智、中本聪等。讨论了比特币的技术及实现机制。
|课程思考=
#课上有讲到Java语言的跨平台性很强，归根到底是因为JVM的存在。只要在任何一个平台上实现了JVM，那么这个平台就可以运行Java。但随后在课下我看见了一篇文章[https://segmentfault.com/a/1190000020658665]，讲如何在JVM上debug。但它使用的客户端是CLion，是我平时写C的IDE。我按照文章里的说法去看了看源码，发现JVM里面其实都是标准的C/C++代码，对Java语言不是很熟悉的我看到这样一个环境的时候就非常亲切。
#我们这门课程一直在强调通用性。但是在提出栈这个结构时却没有特别说明这一点。与栈相对的，其实还有队列这个概念。同样是线性的数据结构，队列是先进先出。两者的应用范围不大一样，栈更侧重于函数的调用与返回，是一个处理并存储的过程；队列则是更倾向于更宏观地实现一些任务，比如系统分配时间片给不同的任务，那么必定按照时间顺序依次执行完任务。在翻阅了一些资料后，我发现这两种结构事实上是可以互相实现的[https://blog.csdn.net/upupday19/article/details/79250085]。那么我们在这一层面使用栈的主要原因其实就是因为我们目前执行的基于Hack CPU的函数调用与返回用栈来实现更加方便（符合我们一般的运算逻辑）。
[[File:Chipx1upd.png|600px|thumb]]
[[File:Chipx2upd.png|600px|thumb]]
#又往之前的学期翻了翻关于时序逻辑的章节。在2018秋学期的最终出版物[[凌波微步――在计算机世界闲庭信步]]中，我们可以看到提供了一些参考的芯片关系图。很有意思的是它标出了一个叫做“建议建造“的芯片DFF16，用来构造PC。我的第一反应是觉得奇怪，因为DFF16和其他的一些器件的组合完全可以用我们已经构造的Register来实现。后来我又一想，我们使用的HDL语言是一种宣告式语言，而我们的设计理念其实更倾向于宣告式编程，即我们只关心正确的输入与输出，不关心硬件层面的process。
#*只不过最近我一直在leetcode上进行一些算法的编程实现，从而体会到现代计算机的很大的限制就是有限的内存和运行时间。就算我们有能无限扩容的以太坊之类的东西，在数学层面上O(n)与O(n^2)的迅速膨胀的差距也是无法接受的。我们必须要想办法进行设计更优化的算法，才能使时间复杂度和空间复杂度都达到可接受的范围。而这样的设计理念其实我们在设计硬件层面的架构时就应该考虑到。我们使用的标准芯片越少，结构越简单，在硬件层面上运行的负担就会越少。所以我觉得我们似乎有必要拿出各个人的电路实现方式，在这样一个相对微观的层面上来考虑结构的设计优化。
|参考文献具体内容=
{{Template:参考文献 网页
|网站名称=写了那么多年 Java 代码，终于 debug 到 JVM 了
|网页链接=https://segmentfault.com/a/1190000020658665
|网页链接显示=https://segmentfault.com/a/1190000020658665
|引用内容描述=在JVM层面上进行debug的简要介绍
}}
{{Template:参考文献 网页
|网站名称=堆栈和队列的相互实现
|网页链接=https://blog.csdn.net/upupday19/article/details/79250085
|网页链接显示=https://blog.csdn.net/upupday19/article/details/79250085
|引用内容描述=栈和队列如何互相实现的思路和具体方法
}}
{{Template:参考文献 网页
|网站名称=2018秋的最终出版物
|网页链接=http://toyhouse.cc:81/index.php/凌波微步――在计算机世界闲庭信步
|网页链接显示=凌波微步――在计算机世界闲庭信步
|引用内容描述=简要参考了第一栈和第二栈的内容
}}


}}
https://segmentfault.com/a/1190000020658665
https://blog.csdn.net/upupday19/article/details/79250085
凌波微步――在计算机世界闲庭信步
http://toyhouse.cc:81/index.php/File:Chipx1upd.png
http://toyhouse.cc:81/index.php/File:Chipx2upd.png